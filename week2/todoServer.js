/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todos list app.
  - Don't use any database, just store all the data in an array to store the todos list data (in-memory)
  - Hard todos: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todos has a title and a description. The title is a string and the description is a string.
  Each todos should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todoss - Retrieve all todos items
    Description: Returns a list of all todos items.
    Response: 200 OK with an array of todos items in JSON format.
    Example: GET http://localhost:3000/todoss
    
  2.GET /todoss/:id - Retrieve a specific todos item by ID
    Description: Returns a specific todos item identified by its ID.
    Response: 200 OK with the todos item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todoss/123
    
  3. POST /todoss - Create a new todos item
    Description: Creates a new todos item.
    Request Body: JSON object representing the todos item.
    Response: 201 Created with the ID of the created todos item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todoss
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todoss/:id - Update an existing todos item by ID
    Description: Updates an existing todos item identified by its ID.
    Request Body: JSON object representing the updated todos item.
    Response: 200 OK if the todos item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todoss/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todoss/:id - Delete a todos item by ID
    Description: Deletes a todos item identified by its ID.
    Response: 200 OK if the todos item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todoss/123

    - For any other route not defined in the server return 404

 */

const express = require("express");
const bodyParser = require("body-parser");
const app = express();

app.use(bodyParser.json());

let todos = [];

app.get("/todos", (req, res) => {
  res.json(todos);
});

app.get("/todos/:id", (req, res) => {
  const todoObj = todos.find((obj) => obj["id"] === parseInt(req.params.id));
  if (!todoObj) {
    res.status(404).send("Not Found!");
  } else {
    res.json(todoObj);
  }
});

app.post("/todos", (req, res) => {
  let newtodo = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    description: req.body.description,
  };
  todos.push(newtodo);
  res.status(201).json(newtodo);
});

app.put("/todos/:id", (req, res) => {
  const todoIndex = todos.findIndex(
    (obj) => obj["id"] === parseInt(req.params.id)
  );
  if (todoIndex === -1) {
    res.status(404).json("Not Found!");
  } else {
    todos[todoIndex].title = req.body.title;
    todos[todoIndex].description = req.body.description;
    res.status(200).json(todos[todoIndex]);
  }
});

app.delete("/todos/:id", (req, res) => {
  const todoIndex = todos.findIndex(
    (obj) => obj["id"] === parseInt(req.params.id)
  );
  if (todoIndex === -1) {
    res.status(404).json("Not Found!");
  } else {
    todos.splice(todoIndex, 1);
    res.status(200).send();
  }
});

app.all("*", (req, res, next) => {
  res.status(404).send();
});

app.listen(3000, () => {
  console.log("Port is up!");
});
